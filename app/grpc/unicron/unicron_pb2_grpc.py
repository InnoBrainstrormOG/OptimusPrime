# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import app.grpc.unicron.unicron_pb2 as unicron__pb2


class UnicronStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.audiolize = channel.unary_unary(
                '/Unicron/audiolize',
                request_serializer=unicron__pb2.AudiolizeRequest.SerializeToString,
                response_deserializer=unicron__pb2.AudiolizeResponse.FromString,
                )
        self.textify = channel.unary_unary(
                '/Unicron/textify',
                request_serializer=unicron__pb2.TextifyRequest.SerializeToString,
                response_deserializer=unicron__pb2.TextifyResponse.FromString,
                )
        self.similarity = channel.unary_unary(
                '/Unicron/similarity',
                request_serializer=unicron__pb2.SimilarityRequest.SerializeToString,
                response_deserializer=unicron__pb2.SimilarityResponse.FromString,
                )


class UnicronServicer(object):
    """Missing associated documentation comment in .proto file."""

    def audiolize(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def textify(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def similarity(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_UnicronServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'audiolize': grpc.unary_unary_rpc_method_handler(
                    servicer.audiolize,
                    request_deserializer=unicron__pb2.AudiolizeRequest.FromString,
                    response_serializer=unicron__pb2.AudiolizeResponse.SerializeToString,
            ),
            'textify': grpc.unary_unary_rpc_method_handler(
                    servicer.textify,
                    request_deserializer=unicron__pb2.TextifyRequest.FromString,
                    response_serializer=unicron__pb2.TextifyResponse.SerializeToString,
            ),
            'similarity': grpc.unary_unary_rpc_method_handler(
                    servicer.similarity,
                    request_deserializer=unicron__pb2.SimilarityRequest.FromString,
                    response_serializer=unicron__pb2.SimilarityResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Unicron', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Unicron(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def audiolize(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Unicron/audiolize',
            unicron__pb2.AudiolizeRequest.SerializeToString,
            unicron__pb2.AudiolizeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def textify(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Unicron/textify',
            unicron__pb2.TextifyRequest.SerializeToString,
            unicron__pb2.TextifyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def similarity(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Unicron/similarity',
            unicron__pb2.SimilarityRequest.SerializeToString,
            unicron__pb2.SimilarityResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
